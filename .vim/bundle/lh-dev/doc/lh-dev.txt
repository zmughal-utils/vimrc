*lh-dev.txt*            Vim library for development oriented scripts (v2.0.0.)
                        For Vim version 7+.    Last change: 20th Feb 2018

                        By Luc Hermitte
                        hermitte {at} free {dot} fr


------------------------------------------------------------------------------
CONTENTS                                *lhdev-contents*      {{{1
|lhdev-presentation|    Presentation
|lhdev-filetype|        Filetype polymorphism
|lhdev-import|          Importing modules/includes
|lhdev-analysis|        Code Analysis
|add-local-help|        Instructions on installing this file (:helptags %:h)

------------------------------------------------------------------------------
PRESENTATION                            *lhdev-presentation* {{{1
|lh-dev| is a library that defines some common vim script functions I use to
implements development oriented plugins and ftplugins.
This library has been conceived as a suite of |autoload| plugins.  As such, it
requires Vim 7+.

Starting with v2.0.0, naming policies and coding style policies have been
extracted to |lh-style| project: http://github.com/LucHermitte/lh-style.

------------------------------------------------------------------------------
FILETYPE POLYMORPHISM                   *lhdev-filetype* {{{1

                                                *lh#dev#option#get()*
                                                *lh#dev#option#get_postfixed()*
lh#dev#option#get({name}, {ft}, {default} [,{scopes}])~
lh#dev#option#get_postfixed({name}, {ft}, {default} [,{scopes}])~
@deprecated since v2.0.0
Use |lh#ft#option#get()| instead.

                                                *lh#dev#option#call()*
lh#dev#option#call({name}, {ft} [, parameters])~
@return `lh#dev#{ft}#{name}({parameters})` if it exists, or
        `lh#dev#{name}({parameters})` otherwise
If {name} is a |List|, then the function name used is: `{name}[0]#{ft}#{name}[1]`
@note filetype inheritance is supported.
@note This function will try to execute >
    :runtime autoload/lh/dev/({ft}/)/name.vim
on all files that match

If a function/mapping is likelly to execute several calls to
|lh#dev#option#call()| with the same {name} and {ft} parameters, you'd rather
use |lh#dev#option#pre_load_overrides()| and |lh#dev#option#fast_call()|. They
would avoid to execute several times |:runtime| on the same files.

                                  *lh#dev#option#pre_load_overrides()*
lh#dev#option#pre_load_overrides({name}, {ft})~
This function executes >
    :runtime autoload/lh/dev/({ft}/)/name.vim
on all files that match
If {name} is a |List|, then the file name used is: {name}[0]/{ft}/{name}[1]
@note filetype inheritance is supported.

If a function/mapping is likelly to execute several calls to
|lh#dev#option#call()| with the same {name} and {ft} parameters, you'd rather
use |lh#dev#option#pre_load_overrides()| and |lh#dev#option#fast_call()|. They
would avoid to execute several times |:runtime| on the same files.

                                                *lh#dev#option#fast_call()*
lh#dev#option#call({name}, {ft} [, parameters])~
@return `lh#dev#{ft}#{name}({parameters})` if it exists, or
        `lh#dev#{name}({parameters})` otherwise
If {name} is a |List|, then the function name used is: `{name}[0]#{ft}#{name}[1]`
@note filetype inheritance is supported.

Unlike |lh#dev#option#call()|, this function doesn't try to source the
autoload plugins where the overrides could be defined. This step is expected
to have been done earlier with |lh#dev#option#pre_load_overrides()|.

------------------------------------------------------------------------------
IMPORTING MODULES/INCLUDES              *lhdev-import* {{{1

                                            *lh#dev#import#add()*
lh#dev#import#add({filename} [, {options}])~
@return if anything was added
@param {filename} : a filename/module name to include/import.
@param {options} : |Dict|
      - `"where"` :` "first"`/`"last"`/language-specific
      - `"delim"` : `"angl`e"/`"quote"` (C, C++)
      - `"symbol":` `"a-name"` (everything by default) (Python)

These functions add import/include statements in the current file.
If the statement is already there, the file will be left unchanged.
At the moment this feature has been specialzed only for C, C++ and Python.

In order to support other languages, define |function|s like
`lh#dev#{java}#import#_do_clean_filename()` and
`lh#dev#{java}#impo_do_build_import_string()`. See their implementation for C
and for Python to get some inspiration.

This function is particulary useful in snippets to make sure we never use
something without making sure we can use it.
See for instance |lh-cpp| snippet for `std::vector<>`...


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                            *lh#dev#import#add_any()*
lh#dev#import#add_any({filenames} [, {options}])~
@return if anything was added
@param {filenames} : |List| of filenames/module names to include/import.
@param {options} : |Dict|
      - `"where"` :` "first"`/`"last"`/language-specific
      - `"delim"` : `"angl`e"/`"quote"` (C, C++)
      - `"symbol":` `"a-name"` (everything by default) (Python)

If none of the module/file names is already imported/included, then
import/include the first one of the |list.|

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*n_CTRL-X_i*  *<Plug>ImportModule*
The normal mode |<plug>| |mapping|| `<Plug>ImportModule` is binded by default
to `CTRL-X_i`.
It'll check where the symbol under the cursor has been defined in the current
tags database and make sure the related file/module is already imported.

------------------------------------------------------------------------------
CODE ANALYSIS                           *lhdev-analysis* {{{1

Function boundaries~
Function boundaries can be obtained with *lh#dev#find_function_boundaries()*
The analysis currently relies on ctags and on |matchit|. The code can be
specialized though (see |lhdev-filetype|).

Two mappings are also provided to select function boundaries, or to apply
operators on function boundaries.
- *v_if* in strict visual mode (not in select mode)
- *o_if* on operators.

For instance:
- `vif` selects the current function
- `yif`  |yank|s the current function
- `dif`  |delete|s the current function

------------------------------------------------------------------------------
Â© Luc Hermitte, 2011-2018, http://github.com/LucHermitte/lh-dev }}}1
 VIM: let b:VS_language = 'american'
 vim:ts=8:sw=4:tw=80:fo=tcq2:isk=!-~,^*,^\|,^\":ft=help:fdm=marker:
